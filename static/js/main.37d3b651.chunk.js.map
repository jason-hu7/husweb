{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","style","marginBottom","href","target","rel","src","process","id","fontSize","marginTop","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qMAwEeA,E,uKApEX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,UAChB,yBAAKA,UAAU,WACb,6BACE,wCACA,uBAAGC,MAAO,CAAEC,aAAc,QAA1B,kBACA,uBAAGC,KAAK,+BAA+BC,OAAO,SAASC,IAAI,YAC1D,yBAAKC,IAAKC,iCAAkDP,UAAU,YAEvE,uBACEG,KAAK,iDACLC,OAAO,SAASC,IAAI,YACrB,yBAAKC,IAAKC,mCAAoDP,UAAU,eAEzE,uBAAGG,KAAK,6BAA6BC,OAAO,SAASC,IAAI,YACxD,yBAAKC,IAAKC,gCAAiDP,UAAU,aAGxE,uBAAGA,UAAU,QAAQG,KAAK,UAA1B,YAIJ,yBAAKH,UAAU,KAAKQ,GAAG,SACrB,yBAAKR,UAAU,WACb,wBAAIC,MAAO,CAAEC,aAAc,QAA3B,YACA,yBAAKI,IAAKC,iCAAkDP,UAAU,OACtE,6FACA,4EACA,0GACA,2FACA,2BACE,uBAAGG,KAAK,6BAA6BK,GAAG,SAAxC,iBADF,8BAOJ,yBAAKR,UAAU,YAAYQ,GAAG,aAC5B,wBAAIP,MAAO,CAAEC,aAAc,QAA3B,eACA,yBAAKF,UAAU,kBACb,yBAAKA,UAAU,sBACb,+EACA,uBAAGG,KAAK,sEACN,yBAAKG,IAAKC,+BAAkDP,UAAU,oBAExE,uBAAGC,MAAO,CAAEQ,SAAU,GAAIC,UAAW,QAArC,+DAKN,4BAAQV,UAAU,UAChB,uBAAGG,KAAK,gCAAgCC,OAAO,SAASC,IAAI,YAC3D,yBAAKC,IAAKC,iCAAkDP,UAAU,UAEvE,uBAAGG,KAAK,iDAAiDC,OAAO,SAASC,IAAI,YAC5E,yBAAKC,IAAKC,mCAAoDP,UAAU,aAEzE,uBAAGG,KAAK,6BAA6BC,OAAO,SAASC,IAAI,YACxD,yBAAKC,IAAKC,gCAAiDP,UAAU,UAEtE,gD,GA/DQW,IAAMC,WCUJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.37d3b651.chunk.js","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          <div className=\"content\">\n            <div>\n              <h1>Jason Hu</h1>\n              <p style={{ marginBottom: '4vh' }}>Data Scientist</p>\n              <a href=\"https://github.com/jason-hu7\" target=\"_blank\" rel=\"noopener\"\n              ><img src={process.env.PUBLIC_URL+\"/assets/GitHub-Mark.png\"} className=\"button\"\n                /></a>\n              <a\n                href=\"https://www.linkedin.com/in/jason-hu-94378758/\"\n                target=\"_blank\" rel=\"noopener\"\n              ><img src={process.env.PUBLIC_URL+\"/assets/linkedin-logo.png\"} className=\"button-li\"\n                /></a>\n              <a href=\"mailto:dcjasonhu@gmail.com\" target=\"_blank\" rel=\"noopener\"\n              ><img src={process.env.PUBLIC_URL+\"/assets/email-icon.png\"} className=\"button\"\n                /></a>\n            </div>\n            <a className=\"pulse\" href=\"#about\">Ë‡</a>\n          </div>\n        </header>\n\n        <div className=\"me\" id=\"about\">\n          <div className=\"content\">\n            <h2 style={{ marginBottom: '3vh' }}>about me</h2>\n            <img src={process.env.PUBLIC_URL+\"/assets/jason-cusco.jpg\"} className=\"hu\" />\n            <p>Hi there! I am a data scientist and machine learning engineer.</p>\n            <p>I know Python, C++, JavaScript, PyTorch, SQL.</p>\n            <p>Specialization: computer vision, anomaly detection and time-series analysis</p>\n            <p>Domain knowledge: oil & gas, utility, and rotating equipment</p>\n            <p>\n              <a href=\"mailto:dcjasonhu@gmail.com\" id=\"email\">get in touch </a>\n           to work with me or chat!\n        </p>\n          </div>\n        </div>\n\n        <div className=\"portfolio\" id=\"portfolio\">\n          <h2 style={{ marginBottom: '6vh' }}>my projects</h2>\n          <div className=\"portfolio-card\">\n            <div className=\"card-front-planner\">\n              <h3>Image to Image Translation with Conditional-GAN</h3>\n              <a href=\"http://cs230.stanford.edu/projects_spring_2018/reports/8289557.pdf\" >\n                <img src={process.env.PUBLIC_URL + \"/assets/generated.png\"} className=\"portfolio-card\" />\n              </a>\n              <p style={{ fontSize: 16, marginTop: '0vh' }}>Best deep learning project in Stanford CS230 2018 Spring</p>\n            </div>\n          </div>\n        </div>\n\n        <footer className=\"footer\">\n          <a href=\"https://github.com/jason-hu7/\" target=\"_blank\" rel=\"noopener\"\n          ><img src={process.env.PUBLIC_URL+\"/assets/GitHub-Mark.png\"} className=\"icon\"\n            /></a>\n          <a href=\"https://www.linkedin.com/in/jason-hu-94378758/\" target=\"_blank\" rel=\"noopener\"\n          ><img src={process.env.PUBLIC_URL+\"/assets/linkedin-logo.png\"} className=\"icon-li\"\n            /></a>\n          <a href=\"mailto:dcjasonhu@gmail.com\" target=\"_blank\" rel=\"noopener\"\n          ><img src={process.env.PUBLIC_URL+\"/assets/email-icon.png\"} className=\"icon\"\n            /></a>\n          <p>Houston, TX</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}